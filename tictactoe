import 'package:flutter/material.dart';

void main() {
  runApp(TicTacToeApp());
}

class TicTacToeApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Tic Tac Toe',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: TicTacToe(),
    );
  }
}

class TicTacToe extends StatefulWidget {
  @override
  _TicTacToeState createState() => _TicTacToeState();
}

class _TicTacToeState extends State<TicTacToe> {
  List<String> board = List.filled(9, '');
  String currentPlayer = 'X';
  String winner = '';
  int scoreX = 0;
  int scoreO = 0;
  int matchesToWin = 3; // Change this for 3, 5, or 10 points
  bool gameFinished = false;

  void resetGame() {
    setState(() {
      board = List.filled(9, '');
      currentPlayer = 'X';
      winner = '';
      gameFinished = false;
    });
  }

  void makeMove(int index) {
    if (board[index] == '' && winner == '' && !gameFinished) {
      setState(() {
        board[index] = currentPlayer;
        winner = checkWinner();
        if (winner != '') {
          updateScore(winner);
          gameFinished = true;
        }
        currentPlayer = currentPlayer == 'X' ? 'O' : 'X';
      });
    }
  }

  String checkWinner() {
    List<List<int>> winningCombinations = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    for (var combination in winningCombinations) {
      if (board[combination[0]] != '' &&
          board[combination[0]] == board[combination[1]] &&
          board[combination[1]] == board[combination[2]]) {
        return board[combination[0]];
      }
    }
    return '';
  }

  void updateScore(String winner) {
    if (winner == 'X') {
      scoreX++;
    } else if (winner == 'O') {
      scoreO++;
    }

    // Check if any player has reached the required score
    if (scoreX == matchesToWin || scoreO == matchesToWin) {
      showGameOverDialog(winner);
    } else {
      Future.delayed(Duration(seconds: 2), resetGame);
    }
  }

  void showGameOverDialog(String winner) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Game Over'),
          content: Text('$winner wins the match!'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                resetScores();
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  void resetScores() {
    setState(() {
      scoreX = 0;
      scoreO = 0;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tic Tac Toe'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: resetGame,
          ),
        ],
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Current Player: $currentPlayer',
            style: TextStyle(fontSize: 24),
          ),
          SizedBox(height: 20),
          Text(
            'Score X: $scoreX  |  Score O: $scoreO',
            style: TextStyle(fontSize: 24),
          ),
          SizedBox(height: 20),
          Text(
            winner != '' ? 'Winner: $winner' : '',
            style: TextStyle(fontSize: 24),
          ),
          Expanded(
            child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
              ),
              itemCount: 9,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => makeMove(index),
                  child: Container(
                    margin: EdgeInsets.all(4),
                    decoration: BoxDecoration(
                      color: Colors.blueAccent,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Center(
                      child: Text(
                        board[index],
                        style: TextStyle(fontSize: 64, color: Colors.white),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
